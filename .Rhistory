cl <- makeCluster(numWorkers, type = "PSOCK")
# Load the necessary objects into the cluster:
clusterExport(cl, c("Sites", "Locations", "Catchments", "UpstreamStats"))
clusterApply(cl, library(maptools))
help(clusterApply)
IndexSites <- function(Site){
library(maptools)
Latitude <- Locations[which(Locations$Site == Site), 'Latitude' ]
Longitude <- Locations[which(Locations$Site == Site), 'Longitude']
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Longitude,Latitude),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
stats <- UpstreamStats[UpstreamStats$FEATUREID == featureID,]
return(c(as.character(Site), Latitude, Longitude, stats))
}
stopCluster(cl)
values <- Sites
# Number of workers (R processes) to use:
numWorkers <- 8
# Set up the 'cluster':
cl <- makeCluster(numWorkers, type = "PSOCK")
# Load the necessary objects into the cluster:
clusterExport(cl, c("Sites", "Locations", "Catchments", "UpstreamStats"))
#clusterApply(cl, library(maptools))
# Execute the function:
start.time <- proc.time()[3]
Results    <- parSapply(cl, values, IndexSites)
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
clusterExport(cl, proj4.NHD)
clusterExport(cl, "proj4.NHD")
# Execute the function:
start.time <- proc.time()[3]
Results    <- parSapply(cl, values, IndexSites)
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
temp <- array(NA, c(length(Sites),(length(fields)+3)))
names(temp) <- c("Site", "Latitude", "Longitude", fields)
View(temp)
c("Site", "Latitude", "Longitude", fields)
names(temp)
names(temp)
data.frame("Site", "Latitude", "Longitude", fields)
temp <- array(NA, c(length(Sites),(length(fields)+3)))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
View(temp)
temp$Site <- Sites[i]
temp$Latitude[i]  <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
temp$Site <- as.character(Sites[i])
temp$Latitude[i]  <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
temp$Longitude[i] <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
temp <- array(NA, c(length(Sites),(length(fields)+3)))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
i = 1
temp$Site <- as.character(Sites[i])
temp$Latitude[i]  <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
temp
temp <- as.dataframe(array(NA, c(length(Sites),(length(fields)+3))))
temp <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
i = 1
temp$Site <- as.character(Sites[i])
temp$Latitude[i]  <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
temp$Longitude[i] <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
View(temp)
temp <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
start.time <- proc.time()[3]
for ( i in 1:length(Sites)){
temp$Site[i] <- as.character(Sites[i])
temp$Latitude[i]  <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
temp$Longitude[i] <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Longitude,Latitude),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
temp[i,4:length(UpstreamStats[1,])] <- UpstreamStats[UpstreamStats$FEATUREID == featureID,]
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
temp <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
start.time <- proc.time()[3]
for ( i in 1:length(Sites)){
Lat <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
Lon <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
temp$Site[i] <- as.character(Sites[i])
temp$Latitude[i] <- Lat
temp$Longitude[i] <- Lon
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
temp[i,4:length(UpstreamStats[1,])] <- UpstreamStats[UpstreamStats$FEATUREID == featureID,]
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
warnings()
length(UpstreamStats[1,])
length(temp[1,])
# Set up storage for covariates:
temp <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(temp) <- c("Site", "Latitude", "Longitude", fields)
start.time <- proc.time()[3]
for ( i in 1:length(Sites)){
Lat <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
Lon <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
temp$Site[i] <- as.character(Sites[i])
temp$Latitude[i] <- Lat
temp$Longitude[i] <- Lon
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
temp[i,4:length(temp[1,])] <- UpstreamStats[UpstreamStats$FEATUREID == featureID,]
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
View(temp)
master.data <- temp
Sys.Date()
paste0("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/BP_Analysis/BP_Analysis/NewCovariateData_", Sys.Date() ,".RData")
save(master.data, paste0("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/BP_Analysis/BP_Analysis/NewCovariateData_", Sys.Date() ,".RData"))
save(master.data, file = paste0("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/BP_Analysis/BP_Analysis/NewCovariateData_", Sys.Date() ,".RData"))
rm(list=ls())
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
#library(chron)
#---------------------
#Read in NHDPlus Data:
#---------------------
proj4.NHD  <- "+proj=longlat +ellps=GRS80 +datum=NAD83 +no_defs"
Catchments <- readShapePoly ( "C:/KPONEIL/USGS/NHDPlusV2/Modified Versions/NENY_NHDCatchment.shp", proj4string=CRS(proj4.NHD))
#-------------------------------------
#Match sites with known location data.
#-------------------------------------
load("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/BP_Analysis/BP_Analysis/Breakpoint_Analysis_Data_ALL_BEST_SITES.RData")
Sites <- unique(master.data$site)
Locations <- read.table("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/Basin_Chars_195.txt", header = TRUE)
#---------------------------------------------------
#Load master covariate data and select vars to keep:
#---------------------------------------------------
load("C:/KPONEIL/USGS/GIS/Covariate Stats/NENY_CovariateData_2013-12-17.RData")
#names(UpstreamStats)
names(LocalStats)
fields <- c("FEATUREID", "ReachLengthKM", "AreaSqKM", "Forest", "Herbacious", "Agriculture", "HerbaciousOrAgriculture", "Developed",
"DevelopedNotOpen", "Wetland", "WetlandOrWater", "Water", "UndevelopedForest", "Impervious", "AnnualTmaxC", "AnnualTminC", "WinterPrcpMM",
"AnnualPrcpMM", "AtmDepositionNO3", "AtmDepositionSO4", "BasinSlopeDEG", "DrainageClass", "HydrologicGroupA", "HydrologicGroupAB",
"HydrologicGroupCD", "HydrologicGroupD4", "HydrologicGroupD1", "SurficialCoarseC", "PercentSandy", "ReachElevationM",
"BasinElevationM", "SummerPrcpMM", "ReachSlopePCNT", "BasinSlopePCNT", "JanPrcpMM", "FebPrcpMM", "MarPrcpMM", "AprPrcpMM", "MayPrcpMM",
"JunPrcpMM", "JulPrcpMM", "AugPrcpMM", "SepPrcpMM", "OctPrcpMM", "NovPrcpMM", "DecPrcpMM", "CONUSOpenWater", "CONUSWetland")
LocalStats <- LocalStats[,names(LocalStats) %in% fields]
# Set up storage for covariates:
master.data <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(master.data) <- c("Site", "Latitude", "Longitude", fields)
start.time <- proc.time()[3]
for ( i in 1:length(Sites)){
Lat <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
Lon <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
master.data$Site[i] <- as.character(Sites[i])
master.data$Latitude[i] <- Lat
master.data$Longitude[i] <- Lon
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
master.data[i,4:length(master.data[1,])] <- UpstreamStats[UpstreamStats$FEATUREID == featureID,]
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
warnings()
setwd("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA")
load("MASTER_STemp_Dataframe.RData")
temp <- master.data
str(temp)
rm(master.data)
temp$AgSite <- paste0(temp$agency, temp$site)
str(temp)
length(unique(AgSite))
length(unique(temp$AgSite))
meta <- read.csv("Master_Metadata.csv")
View(meta)
meta$AgSite <- paste0(meta$Agency, meta$Site)
View(meta)
rm(list=ls())
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
#library(chron)
#---------------------
#Read in NHDPlus Data:
#---------------------
proj4.NHD  <- "+proj=longlat +ellps=GRS80 +datum=NAD83 +no_defs"
Catchments <- readShapePoly ( "C:/KPONEIL/USGS/NHDPlusV2/Modified Versions/NENY_NHDCatchment.shp", proj4string=CRS(proj4.NHD))
setwd("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA")
load("MASTER_STemp_Dataframe.RData")
temp <- master.data
master.data$AgSite <- paste0(master.data$agency, master.data$site)
View(master.data)
master.data$AgSite <- paste0(master.data$agency, "_", master.data$site)
View(master.data)
save(master.data, file = "C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/MASTER_STemp_Dataframe.RData"))
save(master.data, file = "C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/MASTER_STemp_Dataframe.RData")
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/Master_Metadata.csv")
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/Master_Metadata.csv")
meta$AgSite <- paste0(meta$Agency, "_", meta$Site)
View(meta)
View(master.data)
unique(master.data$agency)
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/Master_Metadata.csv")
meta$AgSite <- paste0(meta$Agency, "_", meta$Site)
View(meta)
write.csv(meta, "C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/Master_Metadata.csv")
rm(list=ls())
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
#library(chron)
#---------------------
#Read in NHDPlus Data:
#---------------------
proj4.NHD  <- "+proj=longlat +ellps=GRS80 +datum=NAD83 +no_defs"
Catchments <- readShapePoly ( "C:/KPONEIL/USGS/NHDPlusV2/Modified Versions/NENY_NHDCatchment.shp", proj4string=CRS(proj4.NHD))
setwd("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA")
load("MASTER_STemp_Dataframe.RData")
temp <- master.data
rm(master.data)
#meta <- read.csv("Master_Metadata.csv")
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
Sites <- meta$AgSite
str(temp)
length(which(Sites %in% temp$AgSite))
Sites
View(meta)
max(meta$lon)
View(meta)
max(meta$Lon)
min(meta$Lon)
View(meta)
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
View(meta)
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
View(meta)
meta$AgSite <- paste0(meta$agency, "_", meta$site)
write.csv(meta, "C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
write.csv(meta, "C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
meta$AgSite <- paste0(meta$Agency, "_", meta$Site)
View(meta)
Sites <- meta$AgSite
length(which(Sites %in% temp$AgSite))
length(Sites)
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
Sites <- meta$AgSite
length(which(Sites %in% temp$AgSite))
rm(list=ls())
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
#library(chron)
#---------------------
#Read in NHDPlus Data:
#---------------------
proj4.NHD  <- "+proj=longlat +ellps=GRS80 +datum=NAD83 +no_defs"
Catchments <- readShapePoly ( "C:/KPONEIL/USGS/NHDPlusV2/Modified Versions/NENY_NHDCatchment.shp", proj4string=CRS(proj4.NHD))
setwd("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA")
load("MASTER_STemp_Dataframe.RData")
temp <- master.data
rm(master.data)
#meta <- read.csv("Master_Metadata.csv")
meta <- read.csv("C:/KPONEIL/USGS/Stream Temperature/NortheastSitesWithCoords.csv")
Sites <- meta$AgSite
length(which(Sites %in% temp$AgSite))
#---------------------------------------------------
#Load master covariate data and select vars to keep:
#---------------------------------------------------
load("C:/KPONEIL/USGS/GIS/Covariate Stats/NENY_CovariateData_2013-12-17.RData")
#names(UpstreamStats)
fields <- c("FEATUREID", "ReachLengthKM", "Forest", "Herbacious", "Agriculture", "HerbaciousOrAgriculture", "Developed",
"DevelopedNotOpen", "Wetland", "WetlandOrWater", "Water", "UndevelopedForest", "Impervious", "AnnualTmaxC", "AnnualTminC", "WinterPrcpMM",
"AnnualPrcpMM", "AtmDepositionNO3", "AtmDepositionSO4", "BasinSlopeDEG", "DrainageClass", "HydrologicGroupA", "HydrologicGroupAB",
"HydrologicGroupCD", "HydrologicGroupD4", "HydrologicGroupD1", "SurficialCoarseC", "PercentSandy", "TotDASqKM", "ReachElevationM",
"BasinElevationM", "SummerPrcpMM", "ReachSlopePCNT", "BasinSlopePCNT", "JanPrcpMM", "FebPrcpMM", "MarPrcpMM", "AprPrcpMM", "MayPrcpMM",
"JunPrcpMM", "JulPrcpMM", "AugPrcpMM", "SepPrcpMM", "OctPrcpMM", "NovPrcpMM", "DecPrcpMM", "CONUSOpenWater", "CONUSWetland")
UpstreamStats <- UpstreamStats[,names(UpstreamStats) %in% fields]
# Set up storage for covariates:
covariate.data <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
Sites
View(meta)
meta$AgSite
View(covariate.data)
covariate.data <- data.frame(array(NA, 0,(length(fields)+3))))
covariate.data <- data.frame(array(NA, 0,(length(fields)+3)))
covariate.data
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
length(fields)
covariate.data <- data.frame(array(NA, 0,(length(fields)+3)))
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
covariate.data <- data.frame(array(NA, 1,(length(fields)+3)))
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
covariate.data <- data.frame(array(NA, c(length(Sites),(length(fields)+3))))
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
covariate.data <- data.frame(array(NA, 1,(length(fields)+3)))
covariate.data <- data.frame(array(NA, c(0,(length(fields)+3))))
View(covariate.data)
colnames(covariate.data) <- c("Site", "Latitude", "Longitude", fields)
View(covariate.data)
i=1
Lat <- meta$Latitude[i]
Lon <- meta$Longitude[i]
covariate.data$Site[i] <- as.character(meta$AgSite[i])
covariate.data$Latitude[i] <- Lat
covariate.data$Longitude[i] <- Lon
#M
stats <- c(as.character(meta$AgSite[i]), meta$Latitude[i], meta$Longitude[i])
stats
meta$Latitude[i]
stats <- c(as.character(meta$AgSite[i]), meta$Lat[i], meta$Lon[i])
stats
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
Lat <- meta$Lat[i]
Lon <- meta$Lon[i]
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
featureID <- over(point,Catchments)$FEATUREID
featureID
UpstreamStats[UpstreamStats$FEATUREID == featureID,]
names(stats) <- c("AgSite", "Latitude", "Longitude")
stats <- c(as.character(meta$AgSite[i]), meta$Lat[i], meta$Lon[i], UpstreamStats[UpstreamStats$FEATUREID == featureID,])
stats
names(stats)[1:3] <- c("AgSite", "Latitude", "Longitude")
stats
stats <- data.frame(as.character(meta$AgSite[i]), meta$Lat[i], meta$Lon[i], UpstreamStats[UpstreamStats$FEATUREID == featureID,])
stats
names(stats)[1:3] <- c("AgSite", "Latitude", "Longitude")
stats
rbind(covariate.data, stats)
covariate.data <- data.frame(array(NA, c(0,(length(fields)+3))))
colnames(covariate.data) <- c("AgSite", "Latitude", "Longitude", fields)
covariate.data
start.time <- proc.time()[3]
#for ( i in 1:length(Sites)){
for ( i in 1:4){
#Lat <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
#Lon <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
Lat <- meta$Lat[i]
Lon <- meta$Lon[i]
#covariate.data$Site[i] <- as.character(meta$AgSite[i])
#covariate.data$Latitude[i] <- Lat
#covariate.data$Longitude[i] <- Lon
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
stats <- data.frame(as.character(meta$AgSite[i]), Lat, Lon, UpstreamStats[UpstreamStats$FEATUREID == featureID,])
names(stats)[1:3] <- c("AgSite", "Latitude", "Longitude")
#covariate.data[i,4:length(covariate.data[1,])] <- #UpstreamStats[UpstreamStats$FEATUREID == featureID,]
covariate.data <- rbind(covariate.data, stats)
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
View(covariate.data)
# Set up storage for covariates:
covariate.data <- data.frame(array(NA, c(0,(length(fields)+3))))
colnames(covariate.data) <- c("AgSite", "Latitude", "Longitude", fields)
start.time <- proc.time()[3]
for ( i in 1:length(Sites)){
#Lat <- Locations[which(Locations$Site == Sites[i]), 'Latitude' ]
#Lon <- Locations[which(Locations$Site == Sites[i]), 'Longitude']
Lat <- meta$Lat[i]
Lon <- meta$Lon[i]
#Make the site a SpatialPoints object
point <- SpatialPoints(matrix(data=c(Lon,Lat),ncol=2,byrow=T), proj4string=CRS(proj4.NHD))
#get catchment that contains the point
featureID <- over(point,Catchments)$FEATUREID
stats <- data.frame(as.character(meta$AgSite[i]), Lat, Lon, UpstreamStats[UpstreamStats$FEATUREID == featureID,])
names(stats)[1:3] <- c("AgSite", "Latitude", "Longitude")
covariate.data <- rbind(covariate.data, stats)
print(i)
}
end.time   <- proc.time()[3]
print(paste0((end.time-start.time)/3600, " hours"))
View(covariate.data)
save(covariate.data, file = paste0("C:/KPONEIL/USGS/Stream Temperature/data/temperature/fromKyle/BP_Analysis/BP_Analysis/NewCovariateData_", Sys.Date() ,".RData"))
load("C:/KPONEIL/USGS/Stream Temperature/TempsWithDaymet.RData")
master.data <- FullRecord
View(master.data)
View(master.data)
View(FullRecord)
save(master.data, file = "C:/KPONEIL/USGS/Stream Temperature/TempsWithDaymet.RData")
load("C:/KPONEIL/USGS/Stream Temperature/ThesisStuff/FINAL_CLEANED_DATA/MASTER_STemp_Dataframe.RData")
sites <- unique(master.data$site)
master.data[which(master.data$site == sites[1]),]
View(master.data)
rm(list=ls())
Tiles     <- c(11754, 11755, 11934, 11935, 12114, 12115)
t = 1
NCDF <- open.ncdf(paste0("C:/KPONEIL/SourceData/Projected/DAYMET/Daily/", Tiles[t], "_2000/prcp.nc"))    #netcdf
library(sp)
library(rgdal)
library(rgeos)
library(maptools)     # loads sp library too
library(chron)
library(ncdf)
Tiles     <- c(11754, 11755, 11934, 11935, 12114, 12115)
t = 1
NCDF <- open.ncdf(paste0("C:/KPONEIL/SourceData/Projected/DAYMET/Daily/", Tiles[t], "_2000/prcp.nc"))    #netcdf
#Dimension limits of each of the variables we'll use:
start1 = c(1,1)
latcount <- c(NCDF$var$lat$varsize[1], NCDF$var$lat$varsize[2])
loncount <- c(NCDF$var$lon$varsize[1], NCDF$var$lon$varsize[2])
start2 = c(1, 1, 1)
varcount = c(NCDF$var$lat$varsize[1], NCDF$var$lat$varsize[2], NCDF$var$yearday$varsize)
#Read in variables:
#------------------
lat = get.var.ncdf ( nc=NCDF, varid="lat",                 start = start1, count = latcount )
lon = get.var.ncdf ( nc=NCDF, varid="lon",                 start = start1, count = loncount )
dOY = get.var.ncdf ( nc=NCDF, varid="yearday",             start = 1,      count = YDcount  )
var = get.var.ncdf ( nc=NCDF, varid= paste0(Variables[j]), start = start2, count = varcount )
YDcount  <- NCDF$var$yearday$varsize
#Read in variables:
#------------------
lat = get.var.ncdf ( nc=NCDF, varid="lat",                 start = start1, count = latcount )
lon = get.var.ncdf ( nc=NCDF, varid="lon",                 start = start1, count = loncount )
dOY = get.var.ncdf ( nc=NCDF, varid="yearday",             start = 1,      count = YDcount  )
var = get.var.ncdf ( nc=NCDF, varid= paste0(Variables[j]), start = start2, count = varcount )
#Read in variables:
#------------------
lat = get.var.ncdf ( nc=NCDF, varid="lat",                 start = start1, count = latcount )
lon = get.var.ncdf ( nc=NCDF, varid="lon",                 start = start1, count = loncount )
dOY = get.var.ncdf ( nc=NCDF, varid="yearday",             start = 1,      count = YDcount  )
var = get.var.ncdf ( nc=NCDF, varid="prcp", start = start2, count = varcount )
close.ncdf(NCDF)
templist <- cbind( as.vector(lon), as.vector(lat), Tiles[t], as.vector(var[,,1]))
View(templist)
var
dim(var)
length(which(!is.na(var)))/(185*233*365)
length(which(!is.na(var[,,1])))/(185*233)
Tiles     <- c(11754, 11755, 11934, 11935, 12114, 12115)
for (t in 1:length(Tiles)){
NCDF <- open.ncdf(paste0("C:/KPONEIL/SourceData/Projected/DAYMET/Daily/", Tiles[t], "_2000/prcp.nc"))    #netcdf
#Dimension limits of each of the variables we'll use:
start1 = c(1,1)
latcount <- c(NCDF$var$lat$varsize[1], NCDF$var$lat$varsize[2])
loncount <- c(NCDF$var$lon$varsize[1], NCDF$var$lon$varsize[2])
YDcount  <- NCDF$var$yearday$varsize
start2 = c(1, 1, 1)
varcount = c(NCDF$var$lat$varsize[1], NCDF$var$lat$varsize[2], NCDF$var$yearday$varsize)
#Read in variables:
#------------------
lat = get.var.ncdf ( nc=NCDF, varid="lat",                 start = start1, count = latcount )
lon = get.var.ncdf ( nc=NCDF, varid="lon",                 start = start1, count = loncount )
dOY = get.var.ncdf ( nc=NCDF, varid="yearday",             start = 1,      count = YDcount  )
var = get.var.ncdf ( nc=NCDF, varid="prcp", start = start2, count = varcount )
close.ncdf(NCDF)
templist <- cbind( as.vector(lon), as.vector(lat), Tiles[t], as.vector(var[,,1]))
ifelse (t == 1, coords <- templist, coords <- rbind(coords, templist))
rm(lat, lon, templist)
}
View(coords)
colnames(coords) <- c("Lon", "Lat", "Tile", "Prcp1")
View(coords)
length(which(is.na(coords$Prcp1)))/length(coords$Prcp1)
coords <- as.data.frame(coords) # for indexing
coords$Prcp1[which((is.na(coords$Prcp1)),] <- -9999
length(which(is.na(coords$Prcp1)))/length(coords$Prcp1)
coords$Prcp1[which((is.na(coords$Prcp1))] <- -9999
coords$Prcp1[which(is.na(coords$Prcp1))] <- -9999
write.csv(coords, file = "C:/KPONEIL/USGS/Stream Temperature/DayMetcoordsAll.csv", row.names = F)
print(NCDF)
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS_84 +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=coords[,1:2],ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
coords[,1:2]
class(coords)
typeof(coords)
CoordMatrix <- cbind( coords[,1], coords[,1])
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +datum=WGS_84 +units=m +no_defs"
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +datum=WGS_84 +ellps=WGS84 +units=m +no_defs"
CoordMatrix <- cbind( coords[,1], coords[,1])
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS_84 +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS_84 +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=33 +lat_2=45 +lat_0=40    +lon_0=-97 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5    +lon_0=-97 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5    +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
rm(DaymetShape)
proj4.Daymet <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs "
DaymetShape <- SpatialPoints(matrix(data=CoordMatrix,ncol=2,byrow=T), proj4string=CRS(proj4.Daymet))
class(DaymetShape)
proj4.NHDLambert <- "+proj=lcc +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0 +ellps=NAD83 +datum=NAD83  +units=m +no_defs "
