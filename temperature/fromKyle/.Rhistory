source('d:/PITTAGMAIN/CMR Analyses/Hierach_Bugs/allSpp/gelmanDiagFunction.r')
gelmanRubin()
gelmanRubin
install.packages("RCurl")
?match
DF1 = data.frame(a = c(1, 1, 2, 2), b = 1:4)
DF2 = data.frame(b = c(1, 2, 3, 3, 4), c = letters[1:5])
merge(DF1, DF2)
DF1
DF2
DF1$c = DF2$c[match(DF1$b, DF2$b)]
DF1
match(DF1$b, DF2$b)
load('D:/PITTAGMAIN/CMR Analyses/Hierach_Bugs/allSpp/cutoffYOYInclSpring1DATA.RData')
ls()
cutoffYOYInclSpring1DATA
180+150+24+89+180+240+200+40+420+30+100+25+50+50+75
180*.22
a[a == -9999] <- NA
ifelse((a$b==-9999),NA,a$b)
# use of max vs min airTemp in addition to mean air temp
# need ot estimate summerBP for incomplete years
rm(list=ls())
library(ggplot2)
library(gridExtra)
library(reshape2)
library(mgcv)
library(nlme)
library(plyr)
library(segmented)
library(zoo)
#setwd('C:/Users/STUDENT/Documents/Stream Temp/Stream Temp Data/Breakpoint_Analysis')
setwd('D:/PITTAGMAIN/temperature modeling/fromKyle/BP_Analysis/BP_Analysis')
load("Breakpoint_Analysis_Data_ALL_BEST_SITES.RData")	#master.data
siteList <- unique(master.data$site)
e <- master.data
rm(master.data) # to save memory
# remove rows that don't have both temp and airTemp to save df space and runs times
e <- e[!is.na(e$temp) & !is.na(e$airTemp),]
#For checking the order of e:
e$count <- 1:length(e$year)
names(e) <- c('date','dOY','year','site','temp','airTemp','rain','count')
e$season <- ifelse( e$dOY<80,1,
ifelse( e$dOY<172,2,
ifelse( e$dOY<264,3,
ifelse( e$dOY<355,4,1  ))))
e$season <- ifelse( e$dOY>355,1,e$season )
# this is the key metric for estimating the synchrony between air and water temp
e$tempIndex <- (e$temp-e$airTemp)/(e$temp + 0.00000001) # add small # to avoid Inf
#############################################
#For temporarily looking at individual sites:
#e <- e[which(e$site == 1805),]
#############################################
#===============================================================================
#Get moving mean and SD of temp index for each site and put into the data frame:
#===============================================================================
nSites <- length(siteList)
movingMean <- -9999
movingSD <- -9999
window <- 10
for (siteX in 1:nSites){
print(siteX)
curSite <- which(e$site == siteList[siteX])
cur_mean <-  rollapply(e$tempIndex[curSite], width=window, fill=NA, mean)
cur_SD <-    rollapply(e$tempIndex[curSite], width=window, fill=NA, sd)
movingMean <- append(movingMean, cur_mean)
movingSD <- append(movingSD, cur_SD)
}
e <- cbind(e, movingMean=movingMean[2:length(movingMean)], movingSD=movingSD[2:length(movingSD)])
e$meanSDDiff <- e$movingSD - e$movingMean
# just to make sure the merge doens't screw up order
e <- e[order(e$count),]
# look at some raw data
ggplot( e[e$site == '2432704' & e$year>2007,], aes(dOY,temp) ) + geom_point() + geom_point(aes(dOY,airTemp),color='red') + facet_grid(site~year)
#table( e$year,e$site,is.na( e$temp ) )
#################################################
# set up breaks df
#################################################
siteYearCombos <- unique(e[,c('site','year')])
breaks <- data.frame(array(NA,c(nrow(siteYearCombos),7)))
names(breaks) <- c('site','year','springBP','summerBP','fallBP','quantileLo','quantileHi')
breaks$fallBPComplete <- FALSE
breaks$springBPComplete <- FALSE
breaks$springOrFallBPComplete <- FALSE
breaks$summerBPComplete <- FALSE
breaks$quantileLo <- NA
breaks$quantileHi <- NA
beginningDayForCI <- 125
endingDayForCI <- 275
for ( i in 1:nrow(siteYearCombos)){
print(i)
breaks$year[i] <-   as.numeric(siteYearCombos$year[i])
breaks$site[i] <- as.character(siteYearCombos$site[i])
tmp <- e[e$site == siteYearCombos$site[i] & e$year  %in% siteYearCombos$year[i] & e$dOY %in% beginningDayForCI:endingDayForCI,'tempIndex']
if (any(!is.na(tmp))){
TIQ <- quantile(tmp, probs=c(0.005,0.5,0.995),na.rm=T)
#	movingSDQ <- quantile(e[e$site == siteList[j] & e$year  %in% year & e$dOY %in% beginningDayForCI:endingDayForCI, 'movingSD'], probs=c(0.005,0.5,0.995),na.rm=T)
breaks$quantileLo[i] <- TIQ[1]
breaks$quantileHi[i] <- TIQ[3]
}
}
#===================================================================================
#Use runs analysis of the movingMean to define spring and fall breakpoints:
#===================================================================================
minCompleteDOYBP1 <- 15
maxCompleteDOYBP1 <- 175
numForCompleteBP1 <- round( ( maxCompleteDOYBP1-minCompleteDOYBP1 ) * 0.9 )
minCompleteDOYBP3 <- 225
maxCompleteDOYBP3 <- 350
numForCompleteBP3 <- round( ( maxCompleteDOYBP3-minCompleteDOYBP3 ) * 0.9 )
for (j in 1:nSites){
curSite <- which(e$site == siteList[j])
e1 <- e[curSite,]
e3Spring <- e1[ e1$dOY >= minCompleteDOYBP1 & e1$dOY <= maxCompleteDOYBP1, ]
completeYearsSpring <- NULL #empty out from previous run
if ( !empty( e3Spring ) ) {  #in case e3Spring is empty - avoids error
completeSpring <- as.data.frame( table( e3Spring$year,is.na( e3Spring$temp ) ) )
incompleteYearsSpring <- as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq <  numForCompleteBP1]))
completeYearsSpring <-   as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq >= numForCompleteBP1]))
}
e3Fall <- e1[ e1$dOY >= minCompleteDOYBP3 & e1$dOY <= maxCompleteDOYBP3, ]
completeYearsFall <- NULL
if ( !empty( e3Fall ) ) {
completeFall <- as.data.frame( table( e3Fall$year,is.na( e3Fall$temp ) ) )
incompleteYearsFall <- as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq <  numForCompleteBP3]))
completeYearsFall <-   as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq >= numForCompleteBP3]))
}
completeYearsSpringOrFall <- unique(c(completeYearsSpring,completeYearsFall))
#quantiles <- data.frame(year=c(min(e1$year):max(e1$year)))
#quantiles$lo <- NA
#quantiles$hi <- NA
numForward <- 9 + 1
for (year in completeYearsSpringOrFall){
breaks$springOrFallBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
print(c('BP 1 and 3',j,as.character(siteList[j]),year))
lo <- breaks$quantileLo[breaks$year == year & breaks$site == siteList[j]]
hi <- breaks$quantileHi[breaks$year == year & breaks$site == siteList[j]]
runs <- data.frame(array(NA,c(1,numForward)))
eYear <- e1[e1$year == year, ]
if(year %in% completeYearsSpring){
#out <- segmented( lm(temp~dOY, data=e1[e1$year == year,]), seg.Z=~dOY, psi=list(dOY=c(100,200)))
#tryCatch({out <- segmented( lm(temp~dOY, data=e1[e1$year == year,]), seg.Z=~dOY, psi=list(dOY=c(100,200)))},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
# time forward until approx breakpoint ascending/descending water temp (in 'breaks')
for (i in 1:(200)){ #-window*winFactor )){
for (ii in 2:numForward ){
if( (i+ii-2) %in% eYear$dOY ) {   # amke sure that the dOY is in the looping variable
runs[ i,ii ] <- 1*((eYear$movingMean[ eYear$dOY == (i+ii-2) ] >= lo) & (eYear$movingMean[ eYear$dOY == (i+ii-2) ] <= hi))
} else
runs[ i,ii ] <- 1
}
runs[ i,1 ] <- prod( runs[ i, 2:numForward ] )
}
breaks$springBP[ breaks$year == year & breaks$site == siteList[j] ] <- min(which(runs[,1] == 1))
breaks$springBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
}
if(year %in% completeYearsFall){
# Make this not arbitrary
# time backward until approx breakpoint ascending/descending water temp (in 'breaks')
stopLoop <- max( c( minCompleteDOYBP3,min(eYear$dOY)+numForward + 1 ) )  # to keep from going past lower limit if dOY
for (i in  max(eYear$dOY):stopLoop){
for (ii in 2:numForward ){
if( (i-ii+2) %in% eYear$dOY ) {
runs[ i,ii ] <- 1*((eYear$movingMean[ eYear$dOY == (i-ii+2) ] >= lo) & (eYear$movingMean[ eYear$dOY == (i-ii+2) ] <= hi))
} else
runs[ i,ii ] <- 1
}
runs[ i,1 ] <- prod( runs[ i, 2:numForward ] )
}
breaks$fallBP[ breaks$year == year & breaks$site == siteList[j] ] <- max(which(runs[,1] == 1))
breaks$fallBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
}
#		} #completeYears loop
} #year loop
} #site loop
# add in means for missing BP. use the xBPWMean below to constrain the date range for estimating BP 2
meanBP <- ddply( breaks, .(site), summarise, meanSpringBP = mean(springBP,na.rm=T), meanFallBP = mean(fallBP,na.rm=T) )
breaks$meanSpringBP <- NULL; breaks$meanFallBP <- NULL # in case we've merged before
breaks <- merge( x=breaks, y= meanBP, all.x=T, by=c('site') )
breaks$springBPWMean <- ifelse( is.na(breaks$springBP), breaks$meanSpringBP, breaks$springBP )
breaks$springBPWMean <- ifelse( !is.finite(breaks$springBPWMean), mean(breaks$meanSpringBP[is.finite(breaks$meanSpringBP)]), breaks$springBPWMean )
breaks$fallBPWMean <- ifelse( is.na(breaks$fallBP), breaks$meanFallBP, breaks$fallBP )
breaks$fallBPWMean <- ifelse( !is.finite(breaks$fallBPWMean), mean(breaks$meanFallBP[is.finite(breaks$meanFallBP)]), breaks$fallBPWMean )
#====================================================================================================================
#Segmented regression of water temperature to get breakpoint between ascending and descending temps by year and site:
# summerBP or BP 2
#====================================================================================================================
minCompleteDOYBP2 <- 180
maxCompleteDOYBP2 <- 240
numForCompleteBP2 <- round( ( maxCompleteDOYBP2-minCompleteDOYBP2 ) * 0.95 )
for (j in 1:nSites){
#  for (j in 1:10){
curSite <- which(e$site == siteList[j])
e1 <- e[curSite,]
#are data complete for a year?
e3 <- e1[ e1$dOY >= minCompleteDOYBP2 & e1$dOY <= maxCompleteDOYBP2, ]
complete <- as.data.frame( table( e3$year,is.na( e3$temp ) ) )
incompleteYears <- as.numeric(as.character(complete$Var1[complete$Var2 == 'FALSE' & complete$Freq <  numForCompleteBP2]))
completeYears <-   as.numeric(as.character(complete$Var1[complete$Var2 == 'FALSE' & complete$Freq >= numForCompleteBP2]))
for (year in completeYears){
print(c('BP2',j,as.character(siteList[j]),year))
minDOY <- breaks$springBPWMean[breaks$site == siteList[j] & breaks$year == year ] + 0
maxDOY <-   breaks$fallBPWMean[breaks$site == siteList[j] & breaks$year == year ] - 0
rm(out)
tryCatch({out <- segmented( lm(temp~dOY, data=e1[e1$year == year & e1$dOY >= minDOY & e1$dOY <= maxDOY,]),
seg.Z=~dOY, psi=list(dOY=c(200)))},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
if ( summary(out)$coefficients[2] < 0 ) rm(out) #Delete segmented regression if slope of segment 1 is negative
png(filename=paste0(getwd(),"/figs/summerBP/summerBP_",e1$site[1],"_",year,".png"),width=1000, height=600, bg="white")
plot(e1$dOY[e1$year %in% year], e1$temp[e1$year %in% year],ylim=c(-5,25),xlim=c(0,366))
if(exists("out")){
breaks$summerBP[breaks$year == year & breaks$site == siteList[j]] <- summary(out)$psi[1,2]
breaks$summerBPComplete[breaks$year == year & breaks$site == siteList[j]]  <- TRUE
plot(out,add=T,link=FALSE,lwd=2,col=2:3, lty=c(1),ylim=c(-5,25),xlim=c(0,366))
lines(out,col=2,pch=19,bottom=FALSE,lwd=2)
}
title(main=paste(e1$site[1],"_",year))
dev.off()
}
}
#temp.breaks<-breaks
#----------------------------------------------------------------
#Merge the breakpoints and quantiles with the existing dataframe:
#----------------------------------------------------------------
et <- merge( x=e, y=breaks, by.x=c('year','site'),all.x=T)
################################################
# set segment assignments based on which BPs
# are estimated
################################################
et$segment <- NA
################################################
# Spring = YES  ||  Summer = YES || Fall = YES #
################################################
et$segment <- ifelse( et$springBPComplete & et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY <  et$springBP | et$dOY >= et$fallBP,   1,
ifelse( et$dOY >= et$springBP & et$dOY <  et$summerBP, 2,
ifelse( et$dOY >= et$summerBP & et$dOY <  et$fallBP,   3, et$segment ) ) ) ), et$segment )
################################################
# Spring = NO  ||  Summer = YES || Fall = YES #
################################################
et$segment <- ifelse( !et$springBPComplete & et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY >= et$fallBP,                           1,
ifelse( et$dOY <= et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                  2,
ifelse( et$dOY >= et$summerBP & et$dOY <  et$fallBP,   3, et$segment ) ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = YES || Fall = NO  #
################################################
et$segment <- ifelse( et$springBPComplete & et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <  et$springBP ,                        1,
ifelse( et$dOY >= et$springBP & et$dOY <  et$summerBP, 2,
ifelse( et$dOY >  et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                  3, et$segment ) ) ) ), et$segment )
################################################
# Spring = NO   ||  Summer = YES ||  Fall = NO #
################################################
et$segment <- ifelse( !et$springBPComplete & et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <= et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                2,
ifelse( et$dOY >  et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                3, et$segment ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = NO  || Fall = YES #
################################################
# use mean summer segment?
################################################
# Spring = NO  ||  Summer = NO   || Fall = YES #
################################################
et$segment <- ifelse( !et$springBPComplete & !et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY >= et$fallBP,   1,
ifelse( et$dOY <  et$fallBP,   3, et$segment ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = NO  || Fall = NO  #
################################################
et$segment <- ifelse( et$springBPComplete & !et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <  et$springBP,   1,
ifelse( et$dOY >  et$springBP,   2, et$segment ) ) ), et$segment )
################################################
# Spring = NO   ||  Summer = NO  ||  Fall = NO #
################################################
# no segments can be assigned
###########################################################################################################################
# check order:
et <- et[order(et$count),]
#-----------------
#Save the results:
#-----------------
#temp_frame <- et
#setwd('C:/Users/STUDENT/Documents/Stream Temp/Stream Temp Data/Breakpoint_Analysis')
save(et,siteList,file="Breakpoint_Data.Rdata")
###########################################################################################################################
# Look at some results:
###########################################################################################################################
# Look at some results:
#setwd('C:/Users/STUDENT/Documents/Stream Temp/Stream Temp Data/Breakpoint_Analysis')
#load("Breakpoint_Data.Rdata")
#Distribution of breakpoints:
boxplot(et$springBP,et$summerBP,et$fallBP,names=c("Spring","Summer","Fall"))
# Make graphs for each site
#-------------------------
for (j in 1:nSites){
print(c('making graphs',i))
#i <- 36 # <- which site to view.
temp <- et[et$site == siteList[j] & !is.na(et$temp),]
#png(filename=paste0("BP_Plot_Site_",temp$site[1],".png"),width=1000, height=400, bg="white")
gBP <- ggplot( temp, aes(dOY,tempIndex)) +
geom_point(aes(dOY,movingSD), colour='red') +
geom_point(aes(dOY,movingMean), colour='blue') +
geom_point() +
geom_hline( aes(yintercept=as.numeric(quantileLo)), colour='black') +
geom_hline( aes(yintercept=as.numeric(quantileHi)), colour='black') +
geom_vline( aes(xintercept=as.numeric(springBP)), colour='green') +
geom_vline( aes(xintercept=as.numeric(fallBP)), colour='orange') +
geom_vline( aes(xintercept=as.numeric(summerBP)), colour='blue') +
ylim(c(-10,10))+
#  xlim(c(80,120))+
theme(strip.text.x = element_text(size=6))+
ggtitle(paste(temp$site[1],sep=" ")) +
facet_wrap(~year)
#gSeg <- ggplot( temp, aes( airTemp,temp, color=factor(segmentWFill) ) ) +
gSeg <- ggplot( temp, aes( airTemp,temp, color=factor(segment) ) ) +
geom_point() +
geom_smooth(method='lm') +
theme(legend.position="none") +
theme(strip.text.x = element_text(size=6))+
#  scale_colour_brewer(palette="Set1") +
#    scale_colour_hue()+
#    scale_colour_manual(values = c('blue', "green",'red','grey')) +
facet_wrap(~year)
gOut <- arrangeGrob( gBP, gSeg, ncol=1 )
ggsave(plot=gOut,file=paste(getwd(),'/figs/springFallBP/',temp$site[1],".png",sep=''),dpi=300,width=6,height=8, units='in', scale=2)
}
setwd('D:/PITTAGMAIN/temperature modeling/fromKyle/')
bd <- read.table("Basin_Chars_195.txt", header=TRUE)
bd$site <- bd$Site
bd$lat <- bd$Latitude
bd$long <- bd$Longitude
###############
# look at breakpoints first
bp <- merge( x=breaks, y=bd, all.x=T, by='sites')
ggplot( bp, aes( lat,long ) ) +
geom_point( aes( size = springBP ) )
head(et)
head(bd)
bp <- merge( x=breaks, y=bd, all.x=T, by='site')
ggplot( bp, aes( lat,long ) ) +
geom_point( aes( size = springBP ) )
ggplot( bp, aes( lat,long ) ) +
geom_point( aes( size = springBP*10 ) )
ggplot( bp, aes( lat,long ) ) +
geom_point( aes( size = springBP ) ) +
geom_point( aes( size = summerBP ), color='red' ) +
geom_point( aes( size = fallBP ), color='blue' )
ggplot( bp, aes( lat,long ) ) +
geom_jitter( aes( size = springBP ) ) +
geom_point( aes( size = summerBP ), color='red' ) +
geom_point( aes( size = fallBP ), color='blue' )
ggplot( bp, aes( lat,long ) ) +
geom_jitter( aes( size = springBP ) ) +
geom_jitter( aes( size = summerBP ), color='red' ) +
geom_point( aes( size = fallBP ), color='blue' )
ggplot( bp, aes( lat,long ) ) +
#  geom_jitter( aes( size = springBP ) ) +
geom_jitter( aes( size = summerBP ), color='red' )
install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages(c("arm", "bitops", "class", "deSolve", "evaluate", "formatR", "GGally", "inline", "knitr", "lattice", "latticeExtra", "maps", "markdown", "MASS", "nlme", "optimx", "pls", "R2jags", "Rcpp", "RcppArmadillo", "rpart", "spatstat", "vars"))
install.packages(c("arm", "bitops", "class", "deSolve", "evaluate",
install.packages(c("arm", "bitops", "class", "deSolve", "evaluate", "formatR", "GGally", "inline", "knitr", "lattice", "latticeExtra", "maps", "markdown", "MASS", "nlme", "optimx", "pls", "R2jags", "Rcpp", "RcppArmadillo", "rpart", "spatstat", "vars"))
install.packages(c("arm", "bitops", "class", "deSolve", "evaluate",
