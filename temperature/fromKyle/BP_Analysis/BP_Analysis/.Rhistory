breaks$summerBPComplete <- FALSE
breaks$quantileLo <- NA
breaks$quantileHi <- NA
beginningDayForCI <- 125
endingDayForCI <- 275
for ( i in 1:nrow(siteYearCombos)){
print(i)
breaks$year[i] <-   as.numeric(siteYearCombos$year[i])
breaks$site[i] <- as.character(siteYearCombos$site[i])
tmp <- e[e$site == siteYearCombos$site[i] & e$year  %in% siteYearCombos$year[i] & e$dOY %in% beginningDayForCI:endingDayForCI,'tempIndex']
if (any(!is.na(tmp))){
TIQ <- quantile(tmp, probs=c(0.005,0.5,0.995),na.rm=T)
#	movingSDQ <- quantile(e[e$site == siteList[j] & e$year  %in% year & e$dOY %in% beginningDayForCI:endingDayForCI, 'movingSD'], probs=c(0.005,0.5,0.995),na.rm=T)
breaks$quantileLo[i] <- TIQ[1]
breaks$quantileHi[i] <- TIQ[3]
}
}
#===================================================================================
#Use runs analysis of the movingMean to define spring and fall breakpoints:
#===================================================================================
minCompleteDOYBP1 <- 15
maxCompleteDOYBP1 <- 175
numForCompleteBP1 <- round( ( maxCompleteDOYBP1-minCompleteDOYBP1 ) * 0.9 )
minCompleteDOYBP3 <- 225
maxCompleteDOYBP3 <- 350
numForCompleteBP3 <- round( ( maxCompleteDOYBP3-minCompleteDOYBP3 ) * 0.9 )
for (j in 1:nSites){
curSite <- which(e$site == siteList[j])
e1 <- e[curSite,]
e3Spring <- e1[ e1$dOY >= minCompleteDOYBP1 & e1$dOY <= maxCompleteDOYBP1, ]
completeYearsSpring <- NULL #empty out from previous run
if ( !empty( e3Spring ) ) {  #in case e3Spring is empty - avoids error
completeSpring <- as.data.frame( table( e3Spring$year,is.na( e3Spring$temp ) ) )
incompleteYearsSpring <- as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq <  numForCompleteBP1]))
completeYearsSpring <-   as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq >= numForCompleteBP1]))
}
e3Fall <- e1[ e1$dOY >= minCompleteDOYBP3 & e1$dOY <= maxCompleteDOYBP3, ]
completeYearsFall <- NULL
if ( !empty( e3Fall ) ) {
completeFall <- as.data.frame( table( e3Fall$year,is.na( e3Fall$temp ) ) )
incompleteYearsFall <- as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq <  numForCompleteBP3]))
completeYearsFall <-   as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq >= numForCompleteBP3]))
}
completeYearsSpringOrFall <- unique(c(completeYearsSpring,completeYearsFall))
#quantiles <- data.frame(year=c(min(e1$year):max(e1$year)))
#quantiles$lo <- NA
#quantiles$hi <- NA
numForward <- 14 + 1
for (year in completeYearsSpringOrFall){
breaks$springOrFallBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
print(c('BP 1 and 3',j,as.character(siteList[j]),year))
lo <- breaks$quantileLo[breaks$year == year & breaks$site == siteList[j]]
hi <- breaks$quantileHi[breaks$year == year & breaks$site == siteList[j]]
runs <- data.frame(array(NA,c(1,numForward)))
eYear <- e1[e1$year == year, ]
if(year %in% completeYearsSpring){
#out <- segmented( lm(temp~dOY, data=e1[e1$year == year,]), seg.Z=~dOY, psi=list(dOY=c(100,200)))
#tryCatch({out <- segmented( lm(temp~dOY, data=e1[e1$year == year,]), seg.Z=~dOY, psi=list(dOY=c(100,200)))},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
# time forward until approx breakpoint ascending/descending water temp (in 'breaks')
for (i in 1:(200)){ #-window*winFactor )){
for (ii in 2:numForward ){
if( (i+ii-2) %in% eYear$dOY ) {   # amke sure that the dOY is in the looping variable
runs[ i,ii ] <- 1*((eYear$movingMean[ eYear$dOY == (i+ii-2) ] >= lo) & (eYear$movingMean[ eYear$dOY == (i+ii-2) ] <= hi))
} else
runs[ i,ii ] <- 1
}
runs[ i,1 ] <- prod( runs[ i, 2:numForward ] )
}
breaks$springBP[ breaks$year == year & breaks$site == siteList[j] ] <- min(which(runs[,1] == 1))
breaks$springBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
}
if(year %in% completeYearsFall){
# Make this not arbitrary
# time backward until approx breakpoint ascending/descending water temp (in 'breaks')
stopLoop <- max( c( minCompleteDOYBP3,min(eYear$dOY)+numForward + 1 ) )  # to keep from going past lower limit if dOY
for (i in  max(eYear$dOY):stopLoop){
for (ii in 2:numForward ){
if( (i-ii+2) %in% eYear$dOY ) {
runs[ i,ii ] <- 1*((eYear$movingMean[ eYear$dOY == (i-ii+2) ] >= lo) & (eYear$movingMean[ eYear$dOY == (i-ii+2) ] <= hi))
} else
runs[ i,ii ] <- 1
}
runs[ i,1 ] <- prod( runs[ i, 2:numForward ] )
}
breaks$fallBP[ breaks$year == year & breaks$site == siteList[j] ] <- max(which(runs[,1] == 1))
breaks$fallBPComplete[ breaks$year == year & breaks$site == siteList[j] ] <- TRUE
}
#		} #completeYears loop
} #year loop
} #site loop
# add in means for missing BP. use the xBPWMean below to constrain the date range for estimating BP 2
meanBP <- ddply( breaks, .(site), summarise, meanSpringBP = mean(springBP,na.rm=T), meanFallBP = mean(fallBP,na.rm=T) )
breaks$meanSpringBP <- NULL; breaks$meanFallBP <- NULL # in case we've merged before
breaks <- merge( x=breaks, y= meanBP, all.x=T, by=c('site') )
breaks$springBPWMean <- ifelse( is.na(breaks$springBP), breaks$meanSpringBP, breaks$springBP )
breaks$springBPWMean <- ifelse( !is.finite(breaks$springBPWMean), mean(breaks$meanSpringBP[is.finite(breaks$meanSpringBP)]), breaks$springBPWMean )
breaks$fallBPWMean <- ifelse( is.na(breaks$fallBP), breaks$meanFallBP, breaks$fallBP )
breaks$fallBPWMean <- ifelse( !is.finite(breaks$fallBPWMean), mean(breaks$meanFallBP[is.finite(breaks$meanFallBP)]), breaks$fallBPWMean )
#====================================================================================================================
#Segmented regression of water temperature to get breakpoint between ascending and descending temps by year and site:
# summerBP or BP 2
#====================================================================================================================
minCompleteDOYBP2 <- 180
maxCompleteDOYBP2 <- 240
numForCompleteBP2 <- round( ( maxCompleteDOYBP2-minCompleteDOYBP2 ) * 0.95 )
for (j in 1:nSites){
#  for (j in 1:10){
curSite <- which(e$site == siteList[j])
e1 <- e[curSite,]
#are data complete for a year?
e3 <- e1[ e1$dOY >= minCompleteDOYBP2 & e1$dOY <= maxCompleteDOYBP2, ]
complete <- as.data.frame( table( e3$year,is.na( e3$temp ) ) )
incompleteYears <- as.numeric(as.character(complete$Var1[complete$Var2 == 'FALSE' & complete$Freq <  numForCompleteBP2]))
completeYears <-   as.numeric(as.character(complete$Var1[complete$Var2 == 'FALSE' & complete$Freq >= numForCompleteBP2]))
for (year in completeYears){
print(c('BP2',j,as.character(siteList[j]),year))
minDOY <- breaks$springBPWMean[breaks$site == siteList[j] & breaks$year == year ] + 0
maxDOY <-   breaks$fallBPWMean[breaks$site == siteList[j] & breaks$year == year ] - 0
rm(out)
tryCatch({out <- segmented( lm(temp~dOY, data=e1[e1$year == year & e1$dOY >= minDOY & e1$dOY <= maxDOY,]),
seg.Z=~dOY, psi=list(dOY=c(200)))},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
if ( summary(out)$coefficients[2] < 0 ) rm(out) #Delete segmented regression if slope of segment 1 is negative
png(filename=paste0(getwd(),"/figs/summerBP/summerBP_",e1$site[1],"_",year,".png"),width=1000, height=600, bg="white")
plot(e1$dOY[e1$year %in% year], e1$temp[e1$year %in% year],ylim=c(-5,25),xlim=c(0,366))
if(exists("out")){
breaks$summerBP[breaks$year == year & breaks$site == siteList[j]] <- summary(out)$psi[1,2]
breaks$summerBPComplete[breaks$year == year & breaks$site == siteList[j]]  <- TRUE
plot(out,add=T,link=FALSE,lwd=2,col=2:3, lty=c(1),ylim=c(-5,25),xlim=c(0,366))
lines(out,col=2,pch=19,bottom=FALSE,lwd=2)
}
title(main=paste(e1$site[1],"_",year))
dev.off()
}
}
#temp.breaks<-breaks
#----------------------------------------------------------------
#Merge the breakpoints and quantiles with the existing dataframe:
#----------------------------------------------------------------
et <- merge( x=e, y=breaks, by.x=c('year','site'),all.x=T)
################################################
# set segment assignments based on which BPs
# are estimated
################################################
et$segment <- NA
################################################
# Spring = YES  ||  Summer = YES || Fall = YES #
################################################
et$segment <- ifelse( et$springBPComplete & et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY <  et$springBP | et$dOY >= et$fallBP,   1,
ifelse( et$dOY >= et$springBP & et$dOY <  et$summerBP, 2,
ifelse( et$dOY >= et$summerBP & et$dOY <  et$fallBP,   3, et$segment ) ) ) ), et$segment )
################################################
# Spring = NO  ||  Summer = YES || Fall = YES #
################################################
et$segment <- ifelse( !et$springBPComplete & et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY >= et$fallBP,                           1,
ifelse( et$dOY <= et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                  2,
ifelse( et$dOY >= et$summerBP & et$dOY <  et$fallBP,   3, et$segment ) ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = YES || Fall = NO  #
################################################
et$segment <- ifelse( et$springBPComplete & et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <  et$springBP ,                        1,
ifelse( et$dOY >= et$springBP & et$dOY <  et$summerBP, 2,
ifelse( et$dOY >  et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                  3, et$segment ) ) ) ), et$segment )
################################################
# Spring = NO   ||  Summer = YES ||  Fall = NO #
################################################
et$segment <- ifelse( !et$springBPComplete & et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <= et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                2,
ifelse( et$dOY >  et$summerBP &
et$tempIndex > et$quantileLo &
et$tempIndex < et$quantileHi,                3, et$segment ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = NO  || Fall = YES #
################################################
# use mean summer segment?
################################################
# Spring = NO  ||  Summer = NO   || Fall = YES #
################################################
et$segment <- ifelse( !et$springBPComplete & !et$summerBPComplete & et$fallBPComplete, (
ifelse( et$dOY >= et$fallBP,   1,
ifelse( et$dOY <  et$fallBP,   3, et$segment ) ) ), et$segment )
################################################
# Spring = YES  ||  Summer = NO  || Fall = NO  #
################################################
et$segment <- ifelse( et$springBPComplete & !et$summerBPComplete & !et$fallBPComplete, (
ifelse( et$dOY <  et$springBP,   1,
ifelse( et$dOY >  et$springBP,   2, et$segment ) ) ), et$segment )
################################################
# Spring = NO   ||  Summer = NO  ||  Fall = NO #
################################################
# no segments can be assigned
###########################################################################################################################
# check order:
et <- et[order(et$count),]
#-----------------
#Save the results:
#-----------------
#temp_frame <- et
#setwd('C:/Users/STUDENT/Documents/Stream Temp/Stream Temp Data/Breakpoint_Analysis')
#save(et,siteList,breaks,file="Breakpoint_Data.Rdata")
###########################################################################################################################
# Look at some results:
###########################################################################################################################
# Look at some results:
#setwd('C:/Users/STUDENT/Documents/Stream Temp/Stream Temp Data/Breakpoint_Analysis')
#load("Breakpoint_Data.Rdata")
#Distribution of breakpoints:
boxplot(et$springBP,et$summerBP,et$fallBP,names=c("Spring","Summer","Fall"))
# Make graphs for each site
#-------------------------
if (makeSpringFallGraphs){
for (j in 1:nSites){
print(c('making graphs:',j, 'out of ',nSites))
#i <- 36 # <- which site to view.
temp <- et[et$site == siteList[j] & !is.na(et$temp),]
#png(filename=paste0("BP_Plot_Site_",temp$site[1],".png"),width=1000, height=400, bg="white")
gBP <- ggplot( temp, aes(dOY,tempIndex)) +
geom_point(aes(dOY,movingSD), colour='red') +
geom_point(aes(dOY,movingMean), colour='blue') +
geom_point() +
geom_hline( aes(yintercept=as.numeric(quantileLo)), colour='black') +
geom_hline( aes(yintercept=as.numeric(quantileHi)), colour='black') +
geom_vline( aes(xintercept=as.numeric(springBP)), colour='green') +
geom_vline( aes(xintercept=as.numeric(fallBP)), colour='orange') +
geom_vline( aes(xintercept=as.numeric(summerBP)), colour='blue') +
ylim(c(-10,10))+
#  xlim(c(80,120))+
theme(strip.text.x = element_text(size=6))+
ggtitle(paste(temp$site[1],sep=" ")) +
facet_wrap(~year)
#gSeg <- ggplot( temp, aes( airTemp,temp, color=factor(segmentWFill) ) ) +
gSeg <- ggplot( temp, aes( airTemp,temp, color=factor(segment) ) ) +
geom_point() +
geom_smooth(method='lm') +
theme(legend.position="none") +
theme(strip.text.x = element_text(size=6))+
#  scale_colour_brewer(palette="Set1") +
#    scale_colour_hue()+
#    scale_colour_manual(values = c('blue', "green",'red','grey')) +
facet_wrap(~year)
gOut <- arrangeGrob( gBP, gSeg, ncol=1 )
ggsave(plot=gOut,file=paste(getwd(),'/figs/springFallBP/',temp$site[1],".png",sep=''),dpi=300,width=6,height=8, units='in', scale=2)
}
} # if
#####################################################
#####################################################
# Read in environmental data
#####################################################
#####################################################
setwd('D:/PITTAGMAIN/temperature modeling/fromKyle/')
bd <- read.table("Basin_Chars_195.txt", header=TRUE)
bd$site <- bd$Site
bd$lat <- bd$Latitude
bd$long <- bd$Longitude
#############################
# merge env data into breaks
# create bp df that will hold intercepts and slopes for independent lms
bp <- merge( x=breaks, y=bd, all.x=T, by='site')
bp$springSummerDays <- bp$summerBP - bp$springBP
bp$summerFallDays <- bp$fallBP - bp$summerBP
bp$springFallDays <- bp$fallBP - bp$springBP
###############################
# get feature ID for each site based on lat/lon
# Ana did this on her computer and sent the file
setwd('D:/PITTAGMAIN/temperature modeling/fromKyle/')
bdID <- read.csv("temp_gage_cat_id.csv", header=TRUE)
bdID[,c('Data_File_')] <- NULL
bp <- merge( x=bp, y=bdID, all.x=T, by='site')
###################################################
# run lm for each segment for each site/year combo
###################################################
et <- merge( x=et, y=bdID, all.x=T, by='site')
# plot regressions
et$modSite <- as.numeric(et$site) %% 14  # break site into groups for plotting
ggplot( et[et$segment %in% 2:3,], aes(airTemp,temp, group=site) ) +
geom_smooth( aes( color=(latitude) ), method='lm', se=FALSE ) +
scale_x_continuous('Air temperature') +
scale_y_continuous('Water temperature') +
# theme(legend.position="none") +
facet_grid( ~segment  )
# looks like slopes are very similar across sites
# calculate regression parameters
bp$slope2 <- NA
bp$intercept2 <- NA
bp$slope3 <- NA
bp$intercept3 <- NA
for ( s in 1:length(siteList) ){
for ( y in unique(et$year[et$site == siteList[s]]) ){
#for ( seg in 2:3 ){
#segment 2
lmData2 <- et[et$site == siteList[s] & et$year == y & et$segment == 2, ]
if((length(which(!is.na(lmData2$temp)==TRUE))>5) & (length(which(!is.na(lmData2$airTemp)==TRUE))>5)){
print(c(s,'siteList name',siteList[s],y,'seg2'))
out <- lm( temp ~ airTemp , data=lmData2 )
bp$intercept2[bp$site == siteList[s] & bp$year == y ] <- out$coefficients[1]
bp$slope2[bp$site == siteList[s] & bp$year == y ] <- out$coefficients[2]
}
#segment 3
lmData3 <- et[et$site == siteList[s] & et$year == y & et$segment == 3, ]
if((length(which(!is.na(lmData3$temp)==TRUE))>5) & (length(which(!is.na(lmData3$airTemp)==TRUE))>5)){
print(c(s,'siteList name',siteList[s],y,'seg3'))
out <- lm( temp ~ airTemp , data=lmData3 )
bp$intercept3[bp$site == siteList[s] & bp$year == y ] <- out$coefficients[1]
bp$slope3[bp$site == siteList[s] & bp$year == y ] <- out$coefficients[2]
}
#}
}
}
##  save so all above does not need to be rerun when thnigs crash or you start again
save(et,siteList,breaks,bp,bd,file="Breakpoint_Data.Rdata")
#load(file="Breakpoint_Data.Rdata")
} # reRunBP bracket
getwd()
if( !reRunBP ) load(file="Breakpoint_Data.Rdata")
if( !reRunBP ) load(file="'D:/PITTAGMAIN/temperature modeling/fromKyle/Breakpoint_Data.Rdata")
if( !reRunBP ) load(file="'D:/PITTAGMAIN/temperature modeling/fromKyle/Breakpoint_Data.Rdata")
if( !reRunBP ) load(file="D:/PITTAGMAIN/temperature modeling/fromKyle/Breakpoint_Data.Rdata")
p <- prcomp(bd[,12:37],scale=TRUE,center=TRUE)
plot(p)
biplot(p, cex.lab = 2, cex.axis=2)
summary(p)
loadings(p)
scoresBD <- as.data.frame(scores(p)[,c(1:10)])
scoresBD$site <- siteList
# merge scores into et
etWScores1 <- merge( x=et, y=scoresBD, all.x=T, by='site' )
# add raw data back in
etWScores <- merge(x=etWScores1, y=bd, by='site')
# simple model of slopes across space
etWScores$tempS <- as.numeric(scale(etWScores$temp))
etWScores$airTempS <- as.numeric(scale(etWScores$airTemp))
pairs(bp[,c('BFI_P','Drainage_Area_Km2','Mean_Elevation_m','P_Sand')])
mm2 <- lm( tempS ~ airTempS * factor(segment) * factor(year) +
BFI_P*airTempS * factor(segment) * factor(year) +
Drainage_Area_Km2*airTempS * factor(segment) * factor(year) +
P_Sand*airTempS * factor(segment) * factor(year) , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
summary(mm2)
AIC(mm1,mm2)
mm1 <- lm( tempS ~ airTempS * factor(segment) * factor(year) + BFI_P +Drainage_Area_Km2 + P_Sand , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
mm2 <- lm( tempS ~ airTempS * factor(segment) * factor(year) +
BFI_P*airTempS * factor(segment) * factor(year) +
Drainage_Area_Km2*airTempS * factor(segment) * factor(year) +
P_Sand*airTempS * factor(segment) * factor(year) , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
AIC(mm1,mm2)
bp$BFI_PS <- as.numieric(scale(bp$BFI_P))
bp$BFI_PS <- as.numeric(scale(bp$BFI_P))
bp$Drainage_Area_Km2S <- as.numeric(scale(bp$Drainage_Area_Km2))
bp$Mean_Elevation_mS <- as.numeric(scale(bp$Mean_Elevation_m))
mm1 <- lm( tempS ~ airTempS * factor(segment) * factor(year) + BFI_PS +Drainage_Area_Km2S + P_SandS , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
etWScores$BFI_PS <- as.numeric(scale(etWScores$BFI_P))
etWScores$Drainage_Area_Km2S <- as.numeric(scale(etWScores$Drainage_Area_Km2))
etWScores$Mean_Elevation_mS <- as.numeric(scale(etWScores$Mean_Elevation_m))
etWScores$BFI_PS <- as.numeric(scale(etWScores$BFI_P))
etWScores$Mean_Elevation_mS <- as.numeric(scale(etWScores$Mean_Elevation_m))
etWScores$Drainage_Area_Km2S <- as.numeric(scale(etWScores$Drainage_Area_Km2))
etWScores$P_SandS <- as.numeric(scale(etWScores$P_Sand))
pairs(bp[,c('BFI_PS','Drainage_Area_Km2S','Mean_Elevation_mS','P_SandS')])
mm1 <- lm( tempS ~ airTempS * factor(segment) * factor(year) + BFI_PS +Drainage_Area_Km2S + P_SandS , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
mm1 <- lm( tempS ~ airTempS * factor(segment) * factor(year) + BFI_PS +Drainage_Area_Km2S + P_SandS , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
mm2 <- lm( tempS ~ airTempS * factor(segment) * factor(year) +
BFI_PS*airTempS * factor(segment) * factor(year) +
Drainage_Area_Km2S*airTempS * factor(segment) * factor(year) +
P_SandS*airTempS * factor(segment) * factor(year) , data=etWScores[etWScores$segment %in% 2:3 & etWScores$year %in% 2006:2010,] )
AIC(mm1,mm2)
dd <- expand.grid( airTempS = seq(-2,2,0.5), year = 2006:2010, segment=2:3,
BFI_PS = seq(-1,1,1),
Drainage_Area_Km2S = seq(-1,1,1),
P_SandS = seq(-1,1,1) )
dd$pred <- predict(mm2,dd)
ggplot( dd, aes(airTempS,pred,color=factor(PCBFI_PS))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred,color=factor(BFI_PS))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
dd <- expand.grid( airTempS = seq(-2,2,0.5), year = 2006:2010, segment=2:3,
BFI_PS = seq(-2,1,2),
Drainage_Area_Km2S = seq(-2,1,2),
P_SandS = seq(-2,1,2) )
dd$pred <- predict(mm2,dd)
# shows effects of PCs
ggplot( dd, aes(airTempS,pred,color=factor(
BFI_PS
))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
dd <- expand.grid( airTempS = seq(-2,2,0.5), year = 2006:2010, segment=2:3,
BFI_PS = seq(-2,2,1),
Drainage_Area_Km2S = seq(-2,2,1),
P_SandS = seq(-2,2,1) )
dd$pred <- predict(mm2,dd)
# shows effects of PCs
ggplot( dd, aes(airTempS,pred,color=factor(
BFI_PS
))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred,color=factor(
# BFI_PS
Drainage_Area_Km2S
))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
P_SandS
))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
))) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred
,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
# shows effects of PCs
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( )
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
dd <- expand.grid( airTempS = seq(-2,2,1), year = 2006:2010, segment=2:3,
BFI_PS = seq(-2,2,1),
Drainage_Area_Km2S = seq(-2,2,1),
P_SandS = seq(-2,2,1) )
dd$pred <- predict(mm2,dd)
# shows effects of Vars
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
scale_y_continuous('Stream temperature')+
scale_x_continuous('Air temperature')+
facet_grid(segment~year)
ggplot( dd, aes(airTempS,pred
# ,color=factor(
# BFI_PS
#  Drainage_Area_Km2S
#  P_SandS
#  )
)) +
geom_point( ) +
geom_smooth(method='lm',se=F) +
scale_y_continuous('Stream temperature')+
scale_x_continuous('Air temperature')+
theme(base_size=15) +
facet_grid(segment~year)
